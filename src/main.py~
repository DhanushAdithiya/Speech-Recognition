from platform import java_ver
import numpy as np
from scipy.io import wavfile
import os
import pyaudio
import pickle
import wave
import sys
import asyncio
from dotenv import load_dotenv
import discord
import time
import threading
import signal

from HiddenMarkovModelTrainer import HiddenMarkovModelTrainer
from generateModel import generate_model
from prediction import predict
from monitor_audio import monitor_audio


prediction_queue = []

def main():
    hmm_models = []

    load_dotenv()
    token = os.getenv("TOKEN")
    user_id = os.getenv("USER_ID")
    channel = os.getenv("CHANNEL_ID") 

    intents = discord.Intents.default()
    intents.message_content = True

    client = discord.Client(intents=intents)

    def watch(path_to_watch, event):
        while True:
            if not os.listdir(path_to_watch):
                time.sleep(1)
            for filename in os.listdir(path_to_watch):
                prediction = predict(f"{path_to_watch}/{filename}", hmm_models)
                os.remove(f"{path_to_watch}/{filename}")
                # Put the prediction in the queue
                prediction_queue.append(prediction)
            if event.is_set():
                break

    if not os.listdir("../model"):
        hmm_models = generate_model("../Training2")
    else:
        for file in os.listdir("../model"):
            filename = file[:-4]
            model = pickle.load(open(f"../model/{file}", "rb"))
            hmm_models.append((model, filename))

    event1 = threading.Event()
    event2 = threading.Event()

    t1 = threading.Thread(target=watch, args=("../temp_audios", event1,))
    t2 = threading.Thread(target=monitor_audio, args=(event2,))

    t2.daemon = True
    t1.daemon = True

    t1.start()
    t2.start()

    @client.event
    async def on_ready():
        t2.join()
        while True:
            if prediction_queue:
                prediction = prediction_queue.pop(0)
                print(prediction)
                if prediction == "Doorbell":
                    print("PREDICTED DOORBELL")
                    await client.get_channel(channel).send("You have a visitor")
                elif prediction == "Cooker":
                    await client.get_channel(channel).send("The cooker has blown a whistle")

    try:
        client.run(token)
    except KeyboardInterrupt:
        print("Attempting to close threads")
        event1.set()
        event2.set()
        t1.join()
        t2.join()
        print("Closed Threads Successfully")

if __name__ == "__main__":
    main()
